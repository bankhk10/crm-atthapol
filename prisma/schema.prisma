datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String   @id @default(cuid())
  name              String?
  firstName         String?
  lastName          String?
  email             String?  @unique
  emailVerified     DateTime?
  image             String?
  passwordHash      String?
  role              Role     @default(USER)
  roleDefinitionId  String?

  accounts          Account[]
  sessions          Session[]
  employee          Employee?
  roleDefinition    RoleDefinition? @relation(fields: [roleDefinitionId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Employee {
  id           String          @id @default(cuid())
  employeeCode String          @unique
  userId       String          @unique
  position     String
  department   String
  company      String?
  responsibilityArea String?
  birthDate    DateTime?
  gender       Gender?
  phone        String
  startDate    DateTime
  status       EmployeeStatus  @default(ACTIVE)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RoleDefinition {
  id          String           @id @default(cuid())
  key         String           @unique
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(cuid())
  category    String
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  roles       RolePermission[]

  @@unique([category, name])
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime @default(now())

  role       RoleDefinition @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission     @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}