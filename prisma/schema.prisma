datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  passwordHash     String?
  role             Role      @default(USER)
  roleDefinitionId String?

  accounts            Account[]
  sessions            Session[]
  employee            Employee?
  roleDefinition      RoleDefinition? @relation(fields: [roleDefinitionId], references: [id])
  performedAuditLogs  AuditLog[]      @relation("AuditPerformedByUser")
  createdInteractions Interaction[]   @relation("UserCreatedInteractions")

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  Interaction Interaction[]
}

model Employee {
  id                 String         @id @default(cuid())
  userId             String         @unique
  employeeCode       String         @unique
  prefix             String? // คำนำหน้า (นาย, นาง, น.ส.)
  firstName          String?
  lastName           String?
  position           String
  department         String
  company            String?
  responsibilityArea String?
  birthDate          DateTime?
  gender             Gender?
  phone              String
  startDate          DateTime // วันที่เริ่มงาน (มีอยู่แล้ว)
  status             EmployeeStatus @default(ACTIVE)
  address            String? // ที่อยู่
  province           String? // จังหวัด
  district           String? // อำเภอ
  subdistrict        String? // ตำบล
  postalCode         String? // รหัสไปรษณีย์

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt DateTime?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt DateTime?
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
  deletedAt  DateTime?

  @@unique([identifier, token])
}

model RoleDefinition {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String    @id @default(cuid())
  category    String
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  roles RolePermission[]

  @@unique([category, name])
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime  @default(now())
  deletedAt    DateTime?

  role       RoleDefinition @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission     @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

enum CustomerType {
  DEALER
  SUBDEALER
  FARMER
}

model Customer {
  id          String       @id @default(cuid())
  type        CustomerType
  name        String
  prefix      String?
  firstName   String?
  lastName    String?
  email       String?
  phone       String
  taxId       String?
  address     String?
  province    String?
  district    String?
  subdistrict String?
  postalCode  String?
  birthDate   DateTime?
  gender      Gender?
  profile     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
}

model AuditLog {
  id                String      @id @default(cuid())
  model             String
  action            AuditAction
  recordId          String?
  before            Json?
  after             Json?
  performedAt       DateTime    @default(now())
  performedByUserId String?
  performedBy       User?       @relation("AuditPerformedByUser", fields: [performedByUserId], references: [id])
  deletedAt         DateTime?
}

// ====================
// Partner Types
// ====================
enum PartnerType {
  DEALER
  SUB_DEALER
  FARMER
}

enum PartnerStatus {
  ACTIVE
  INACTIVE
}

// ====================
// Partner Model
// ====================
model Partner {
  id          String        @id @default(cuid())
  type        PartnerType
  code        String        @unique
  name        String
  contactName String?
  phone       String?
  email       String?
  address     String?
  province    String?
  district    String?
  subdistrict String?
  postalCode  String?
  latitude    Float?
  longitude   Float?
  status      PartnerStatus @default(ACTIVE)

  parentId String?
  parent   Partner?  @relation("PartnerHierarchy", fields: [parentId], references: [id])
  children Partner[] @relation("PartnerHierarchy")

  businessInfo BusinessInfo?
  sales        Sale[]
  interactions Interaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ====================
// Business Info (เฉพาะ Dealer/SubDealer/Farmer)
// ====================
model BusinessInfo {
  id          String  @id @default(cuid())
  partnerId   String  @unique
  creditTerm  Int? // Dealer/SubDealer
  creditLimit Float? // Dealer/SubDealer
  salesTarget Float? // Dealer/SubDealer
  areaSize    Float? // Farmer
  cropType    String? // Farmer
  season      String? // Farmer

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ====================
// Sales Transactions
// ====================
model Sale {
  id            String    @id @default(cuid())
  partnerId     String
  orderDate     DateTime
  productName   String
  quantity      Float
  amount        Float
  paymentStatus String
  dueDate       DateTime?

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ====================
// Interaction Logs
// ====================
enum InteractionChannel {
  CALL
  VISIT
  EMAIL
  LINE
  OTHER
}

model Interaction {
  id        String             @id @default(cuid())
  partnerId String
  date      DateTime
  channel   InteractionChannel
  notes     String?

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  createdById String?
  createdBy   User?   @relation("UserCreatedInteractions", fields: [createdById], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
}
