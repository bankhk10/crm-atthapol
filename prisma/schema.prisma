// ====================
// DATABASE + GENERATOR
// ====================
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ====================
// ENUMS
// ====================
enum Role {
  ADMIN
  MANAGER
  USER
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PartnerStatus {
  ACTIVE
  INACTIVE
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
}

enum InteractionChannel {
  CALL
  VISIT
  EMAIL
  LINE
  OTHER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

// New customer type enum
enum CustomerType {
  DEALER
  SUB_DEALER
  FARMER
  BROKER
}

// ====================
// PRODUCT & STOCK
// ====================
model Product {
  id            String         @id @default(cuid())
  productCode   String         @unique
  lotNumber     String?
  nameTH        String
  nameEN        String?
  category      String
  brand         String?
  unit          String?
  price         Float?
  mfgDate       DateTime?
  expDate       DateTime?
  status        ProductStatus  @default(ACTIVE)
  imageUrl      String?
  description   String?
  features      String?
  packagingSize String?

  stocks   Stock[]
  images   ProductImage[]
  plants   ProductPlant[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Stock {
  id          String   @id @default(cuid())
  productId   String
  qtyOnHand   Int      @default(0)
  qtyReserved Int      @default(0)
  qtyVirtual  Int      @default(0)
  lotNumber   String?
  note        String?
  mfgDate     DateTime?
  expDate     DateTime?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  sort      Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Plant {
  id   String @id @default(cuid())
  name String @unique

  products ProductPlant[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ProductPlant {
  productId String
  plantId   String

  product Product @relation(fields: [productId], references: [id])
  plant   Plant   @relation(fields: [plantId], references: [id])

  @@id([productId, plantId])
}

// ====================
// AUTHENTICATION MODELS
// ====================
model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  passwordHash     String?
  role             Role      @default(USER)
  roleDefinitionId String?

  accounts           Account[]
  sessions           Session[]
  employee           Employee?
  roleDefinition     RoleDefinition? @relation(fields: [roleDefinitionId], references: [id])
  performedAuditLogs AuditLog[]      @relation("AuditPerformedByUser")
  createdInteractions Interaction[]  @relation("UserCreatedInteractions")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt DateTime?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt DateTime?
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
  deletedAt  DateTime?

  @@unique([identifier, token])
}

// ====================
// EMPLOYEE MODELS
// ====================
model Employee {
  id                 String         @id @default(cuid())
  userId             String         @unique
  employeeCode       String         @unique
  prefix             String?
  firstName          String?
  lastName           String?
  position           String
  department         String
  company            String?
  responsibilityArea String?
  birthDate          DateTime?
  gender             Gender?
  phone              String
  startDate          DateTime
  status             EmployeeStatus @default(ACTIVE)
  address            String?
  province           String?
  district           String?
  subdistrict        String?
  postalCode         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Customers handled by this employee
  responsibleCustomers Customer[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ====================
// RBAC MODELS
// ====================
model RoleDefinition {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String    @id @default(cuid())
  category    String
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  roles RolePermission[]

  @@unique([category, name])
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime  @default(now())
  deletedAt    DateTime?

  role       RoleDefinition @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission     @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

// ====================
// AUDIT LOG
// ====================
model AuditLog {
  id                String      @id @default(cuid())
  model             String
  action            AuditAction
  recordId          String?
  before            Json?
  after             Json?
  performedAt       DateTime    @default(now())
  performedByUserId String?
  performedBy       User?       @relation("AuditPerformedByUser", fields: [performedByUserId], references: [id])
  deletedAt         DateTime?
}

// ====================
// CUSTOMERS
// ====================
model CustomerGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  discount    Float?

  customers Customer[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Customer {
  id                    String        @id @default(cuid())
  responsibleEmployeeId String?
  customerGroupId       String?
  customerType          CustomerType

  prefix      String?
  firstName   String?
  lastName    String?
  age         Int?
  gender      Gender?
  phone       String?
  email       String?
  birthDate   DateTime?
  companyName String?
  taxId       String?
  address     String?
  subdistrict String?
  district    String?
  province    String?
  postalCode  String?
  status      PartnerStatus @default(ACTIVE)

  responsibleEmployee Employee?     @relation(fields: [responsibleEmployeeId], references: [id])
  customerGroup       CustomerGroup? @relation(fields: [customerGroupId], references: [id])

  dealerDetail    DealerDetail?
  subDealerDetail SubDealerDetail?
  farmerDetail    FarmerDetail?
  brokerDetail    BrokerDetail?

  sales        Sale[]
  interactions Interaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model DealerDetail {
  id          String         @id @default(cuid())
  customerId  String         @unique
  region      String?
  status      PartnerStatus  @default(ACTIVE)
  contactName String?
  contactPhone String?
  creditLimit Float?

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  subDealers SubDealerDetail[]
  farmers    FarmerDetail[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model SubDealerDetail {
  id          String         @id @default(cuid())
  customerId  String         @unique
  dealerId    String?
  status      PartnerStatus  @default(ACTIVE)

  customer Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  dealer   DealerDetail? @relation(fields: [dealerId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model FarmerDetail {
  id                  String         @id @default(cuid())
  customerId          String         @unique
  dealerId            String?
  areaSize            Float?
  latitude            Float?
  longitude           Float?
  cropType            String?
  cultivar            String?
  averageYield        Float?
  fundingSource       String?
  landPreparation     String?
  cultivationMethod   String?
  averagePlantingCost Float?
  harvestingMethod    String?
  productionChannel   String?
  harvestingCost      Float?

  customer Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  dealer   DealerDetail? @relation(fields: [dealerId], references: [id])
  farmPlots FarmPlot[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model BrokerDetail {
  id                    String   @id @default(cuid())
  customerId            String   @unique
  cropTypes             String?
  currentCropVolume     String?
  farmerNetworkCount    Int?
  plotCount             Int?
  areaSize              Float?
  plantingCyclesPerYear Int?
  creditTermForFarmers  Int?
  agriChemValuePerCycle Float?
  agriChemQtyPerCycle   Float?
  regularStore          String?
  serviceTypes          String?
  brandsUsed            String?

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model FarmPlot {
  id              String        @id @default(cuid())
  farmerDetailId  String
  farmerDetail    FarmerDetail  @relation(fields: [farmerDetailId], references: [id], onDelete: Cascade)

  latitude        Float?
  longitude       Float?
  plantingArea    Float?
  cropType        String?
  cropVariety     String?
  soilType        String?
  waterSource     String?
  machineryUsed   Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ====================
// SALES
// ====================
model Sale {
  id            String    @id @default(cuid())
  customerId    String?
  orderDate     DateTime
  productName   String
  quantity      Float
  amount        Float
  paymentStatus String
  dueDate       DateTime?

  customer   Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ====================
// INTERACTIONS
// ====================
model Interaction {
  id        String             @id @default(cuid())
  date      DateTime
  channel   InteractionChannel
  notes     String?

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  createdById String?
  createdBy   User? @relation("UserCreatedInteractions", fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

