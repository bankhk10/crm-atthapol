// ====================
// DATABASE + GENERATOR
// ====================
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ====================
// ENUMS
// ====================
enum Role {
  ADMIN
  MANAGER
  USER
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PartnerStatus {
  ACTIVE
  INACTIVE
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
}

enum InteractionChannel {
  CALL
  VISIT
  EMAIL
  LINE
  OTHER
}

// ====================
// AUTHENTICATION MODELS
// ====================
model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  passwordHash     String?
  role             Role      @default(USER)
  roleDefinitionId String?

  accounts           Account[]
  sessions           Session[]
  employee           Employee?
  roleDefinition     RoleDefinition? @relation(fields: [roleDefinitionId], references: [id])
  performedAuditLogs AuditLog[]      @relation("AuditPerformedByUser")
  createdInteractions Interaction[]  @relation("UserCreatedInteractions")

  // Back-relations for createdBy/updatedBy
  createdDealers    Dealer[]    @relation("DealerCreatedBy")
  updatedDealers    Dealer[]    @relation("DealerUpdatedBy")
  createdSubDealers SubDealer[] @relation("SubDealerCreatedBy")
  updatedSubDealers SubDealer[] @relation("SubDealerUpdatedBy")
  createdFarmers    Farmer[]    @relation("FarmerCreatedBy")
  updatedFarmers    Farmer[]    @relation("FarmerUpdatedBy")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt DateTime?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt DateTime?
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
  deletedAt  DateTime?

  @@unique([identifier, token])
}

// ====================
// EMPLOYEE MODELS
// ====================
model Employee {
  id                 String         @id @default(cuid())
  userId             String         @unique
  employeeCode       String         @unique
  prefix             String?
  firstName          String?
  lastName           String?
  position           String
  department         String
  company            String?
  responsibilityArea String?
  birthDate          DateTime?
  gender             Gender?
  phone              String
  startDate          DateTime
  status             EmployeeStatus @default(ACTIVE)
  address            String?
  province           String?
  district           String?
  subdistrict        String?
  postalCode         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  responsibleDealers   Dealer[]
  responsibleSubDealers SubDealer[]
  responsibleFarmers    Farmer[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ====================
// RBAC MODELS
// ====================
model RoleDefinition {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String    @id @default(cuid())
  category    String
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  roles RolePermission[]

  @@unique([category, name])
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime  @default(now())
  deletedAt    DateTime?

  role       RoleDefinition @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission     @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

// ====================
// AUDIT LOG
// ====================
model AuditLog {
  id                String      @id @default(cuid())
  model             String
  action            AuditAction
  recordId          String?
  before            Json?
  after             Json?
  performedAt       DateTime    @default(now())
  performedByUserId String?
  performedBy       User?       @relation("AuditPerformedByUser", fields: [performedByUserId], references: [id])
  deletedAt         DateTime?
}

// ====================
// DEALER / SUBDEALER / FARMER
// ====================
model Dealer {
  id          String        @id @default(cuid())
  code        String        @unique
  name        String
  taxId       String?
  phone       String?
  email       String?
  address     String?
  province    String?
  district    String?
  subdistrict String?
  postalCode  String?
  latitude    Float?
  longitude   Float?
  status      PartnerStatus @default(ACTIVE)

  responsibleEmployeeId String?
  responsibleEmployee   Employee? @relation(fields: [responsibleEmployeeId], references: [id])

  // Additional business fields for Dealer
  averageMonthlyPurchase Float?
  mainProducts           String?
  brandsSold             String?
  relationshipScore      Int?
  businessNotes          String?

  createdById String?
  updatedById String?
  createdBy   User? @relation("DealerCreatedBy", fields: [createdById], references: [id])
  updatedBy   User? @relation("DealerUpdatedBy", fields: [updatedById], references: [id])

  subDealers   SubDealer[]
  businessInfo BusinessInfo?
  sales        Sale[]
  interactions Interaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model SubDealer {
  id          String        @id @default(cuid())
  code        String        @unique
  name        String
  taxId       String?
  phone       String?
  email       String?
  address     String?
  province    String?
  district    String?
  subdistrict String?
  postalCode  String?
  latitude    Float?
  longitude   Float?
  status      PartnerStatus @default(ACTIVE)

  responsibleEmployeeId String?
  responsibleEmployee   Employee? @relation(fields: [responsibleEmployeeId], references: [id])

  dealerId     String?
  dealer       Dealer?      @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  // Additional business fields for SubDealer
  competitor             String?
  cropsInArea            String?
  averageMonthlyPurchase Float?
  mainProducts           String?
  brandsSold             String?
  areaType               String?
  relationshipScore      Int?
  businessNotes          String?

  createdById String?
  updatedById String?
  createdBy   User? @relation("SubDealerCreatedBy", fields: [createdById], references: [id])
  updatedBy   User? @relation("SubDealerUpdatedBy", fields: [updatedById], references: [id])
  farmers      Farmer[]
  businessInfo BusinessInfo?
  sales        Sale[]
  interactions Interaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Farmer {
  id          String        @id @default(cuid())
  code        String        @unique
  name        String
  phone       String?
  email       String?
  address     String?
  province    String?
  district    String?
  subdistrict String?
  postalCode  String?
  latitude    Float?
  longitude   Float?
  gender      Gender?
  birthDate   DateTime?
  farmName    String?
  farmSize    Float?
  cropType    String?
  status      PartnerStatus @default(ACTIVE)

  responsibleEmployeeId String?
  responsibleEmployee   Employee? @relation(fields: [responsibleEmployeeId], references: [id])

  subDealerId String?
  subDealer   SubDealer?    @relation(fields: [subDealerId], references: [id], onDelete: Cascade)
  businessInfo BusinessInfo?
  sales        Sale[]
  interactions Interaction[]

  createdById String?
  updatedById String?
  createdBy   User? @relation("FarmerCreatedBy", fields: [createdById], references: [id])
  updatedBy   User? @relation("FarmerUpdatedBy", fields: [updatedById], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ====================
// BUSINESS INFO
// ====================
model BusinessInfo {
  id          String   @id @default(cuid())
  dealerId    String?  @unique
  subDealerId String?  @unique
  farmerId    String?  @unique
  creditTerm  Int?
  creditLimit Float?
  salesTarget Float?
  areaSize    Float?
  cropType    String?
  season      String?

  dealer     Dealer?    @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  subDealer  SubDealer? @relation(fields: [subDealerId], references: [id], onDelete: Cascade)
  farmer     Farmer?    @relation(fields: [farmerId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ====================
// SALES
// ====================
model Sale {
  id            String    @id @default(cuid())
  dealerId      String?
  subDealerId   String?
  farmerId      String?
  orderDate     DateTime
  productName   String
  quantity      Float
  amount        Float
  paymentStatus String
  dueDate       DateTime?

  dealer     Dealer?    @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  subDealer  SubDealer? @relation(fields: [subDealerId], references: [id], onDelete: Cascade)
  farmer     Farmer?    @relation(fields: [farmerId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ====================
// INTERACTIONS
// ====================
model Interaction {
  id        String             @id @default(cuid())
  date      DateTime
  channel   InteractionChannel
  notes     String?

  dealerId    String?
  subDealerId String?
  farmerId    String?

  dealer     Dealer?    @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  subDealer  SubDealer? @relation(fields: [subDealerId], references: [id], onDelete: Cascade)
  farmer     Farmer?    @relation(fields: [farmerId], references: [id], onDelete: Cascade)

  createdById String?
  createdBy   User? @relation("UserCreatedInteractions", fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}
